Df Sum Sq Mean Sq F value    Pr(>F)
age         1  741.1  741.06 26.2275 7.229e-07 ***
nighttime   1  575.3  575.33 20.3620 1.104e-05 ***
speed       1   25.5   25.47  0.9015    0.3436
Residuals 196 5538.0   28.26
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
model_total <- lm(bac ~ age + nighttime + speed, data = drinkdriving)
[1] 61
summary(model_total)
[1] 62
Call:
lm(formula = bac ~ age + nighttime + speed, data = drinkdriving)
Residuals:
Min       1Q   Median       3Q      Max
-12.2534  -4.4961   0.4293   3.4708  13.7112
Coefficients:
Estimate Std. Error t value Pr(>|t|)
(Intercept)    22.80611    2.90202   7.859 2.52e-13 ***
age            -0.09800    0.03226  -3.038  0.00271 **
nighttimenight  3.60130    0.80591   4.469 1.33e-05 ***
speed           0.04266    0.04493   0.949  0.34355
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
Residual standard error: 5.316 on 196 degrees of freedom
(50 observations deleted due to missingness)
Multiple R-squared:  0.195,	Adjusted R-squared:  0.1827
F-statistic: 15.83 on 3 and 196 DF,  p-value: 2.947e-09
par(mfrow = c(2, 2))
[1] 63
$mfrow
[1] 2 2
plot(model_total, which = c(1:4))
[1] 64
vif(model_total)
[1] 65
age nighttime     speed
1.699320  1.008540  1.700081
t.test(drinkdriving$speed ~ drinkdriving$nighttime, alternative = "greater")
[1] 66
Welch Two Sample t-test
data:  drinkdriving$speed by drinkdriving$nighttime
t = -1.7213, df = 174.16, p-value = 0.9565
alternative hypothesis: true difference in means is greater than 0
95 percent confidence interval:
-5.481685       Inf
sample estimates:
mean in group day mean in group night
38.25974            41.05556
na.omit(drinkdriving) %>% ggplot(aes(x = nighttime, y = speed,
colour = nighttime, fill = nighttime)) + geom_bar(position = "dodge",
stat = "identity") + geom_smooth(method = "lm", formula = y ~
x) + theme_minimal() + scale_color_manual(values = c("#73C6B6",
"#CB4335"), aesthetics = c("colour", "fill")) + labs(title = "Relationship of Time - Speed",
x = "Time", y = "Speed", colour = "Time", fill = "Time")
[1] 67
model_5 <- glm(outcome ~ bac + age + speed + nighttime + prior_offence,
data = drinkdriving, family = binomial)
[1] 68
summary(model_5)
[1] 69
Call:
glm(formula = outcome ~ bac + age + speed + nighttime + prior_offence,
family = binomial, data = drinkdriving)
Deviance Residuals:
Min       1Q   Median       3Q      Max
-1.8108  -0.2249  -0.0537  -0.0059   4.3066
Coefficients:
Estimate Std. Error z value Pr(>|z|)
(Intercept)         -2.42318    3.62250  -0.669 0.503543
bac                 -0.29366    0.07755  -3.786 0.000153 ***
age                  0.14231    0.03842   3.704 0.000212 ***
speed               -0.13442    0.05117  -2.627 0.008615 **
nighttimenight       0.40565    0.75368   0.538 0.590423
prior_offenceDR50    1.27038    2.19892   0.578 0.563448
prior_offenceDR80    8.35576    2.96734   2.816 0.004864 **
prior_offenceN       3.71532    1.92691   1.928 0.053839 .
prior_offencePL     -6.44855 2399.54607  -0.003 0.997856
prior_offenceSP      8.82302    2.91144   3.030 0.002442 **
[ reached getOption("max.print") -- omitted 1 row ]
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
(Dispersion parameter for binomial family taken to be 1)
Null deviance: 180.85  on 195  degrees of freedom
Residual deviance:  62.44  on 185  degrees of freedom
(54 observations deleted due to missingness)
AIC: 84.44
Number of Fisher Scoring iterations: 15
scaled_model_speed <- glm(outcome ~ scale(speed), data = drinkdriving,
family = binomial)
[1] 70
summary(scaled_model_speed)
[1] 71
Call:
glm(formula = outcome ~ scale(speed), family = binomial, data = drinkdriving)
Deviance Residuals:
Min       1Q   Median       3Q      Max
-1.8119  -0.5273  -0.2652  -0.0954   3.4719
Coefficients:
Estimate Std. Error z value Pr(>|z|)
(Intercept)   -2.4134     0.3027  -7.973 1.55e-15 ***
scale(speed)  -1.9816     0.3042  -6.514 7.32e-11 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
(Dispersion parameter for binomial family taken to be 1)
Null deviance: 229.08  on 240  degrees of freedom
Residual deviance: 152.85  on 239  degrees of freedom
(9 observations deleted due to missingness)
AIC: 156.85
Number of Fisher Scoring iterations: 6
scaled_model_bac <- glm(outcome ~ scale(bac), data = drinkdriving,
family = binomial)
[1] 72
summary(scaled_model_bac)
[1] 73
Call:
glm(formula = outcome ~ scale(bac), family = binomial, data = drinkdriving)
Deviance Residuals:
Min       1Q   Median       3Q      Max
-1.6096  -0.6597  -0.4148  -0.2099   2.9710
Coefficients:
Estimate Std. Error z value Pr(>|z|)
(Intercept)  -1.8959     0.2229  -8.506  < 2e-16 ***
scale(bac)   -1.2848     0.2210  -5.814  6.1e-09 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
(Dispersion parameter for binomial family taken to be 1)
Null deviance: 232.05  on 240  degrees of freedom
Residual deviance: 185.41  on 239  degrees of freedom
(9 observations deleted due to missingness)
AIC: 189.41
Number of Fisher Scoring iterations: 5
anova(scaled_model_speed, test = "Chisq")
[1] 74
Analysis of Deviance Table
Model: binomial, link: logit
Response: outcome
Terms added sequentially (first to last)
Df Deviance Resid. Df Resid. Dev  Pr(>Chi)
NULL                           240     229.08
scale(speed)  1    76.23       239     152.85 < 2.2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
anova(scaled_model_bac, test = "Chisq")
[1] 75
Analysis of Deviance Table
Model: binomial, link: logit
Response: outcome
Terms added sequentially (first to last)
Df Deviance Resid. Df Resid. Dev  Pr(>Chi)
NULL                         240     232.05
scale(bac)  1   46.637       239     185.41 8.544e-12 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
drinkdriving$new <- rep(drinkdriving$prior_offence)
[1] 76
drinkdriving$new <- as.character(drinkdriving$new)
[1] 77
drinkdriving$new[which(drinkdriving$new == "N")] <- NA
[1] 78
drinkdriving$new[which(drinkdriving$new != "DR50")] <- "Non"
[1] 79
drinkdriving$new <- as.factor(drinkdriving$new)
[1] 80
drinkdriving$newoutcome <- ifelse(drinkdriving$outcome == "fine",
1, 0)
[1] 81
model_drink_offence <- glm(newoutcome ~ relevel(new, "Non"),
data = drinkdriving, family = binomial)
[1] 82
summary(model_drink_offence)
[1] 83
Call:
glm(formula = newoutcome ~ relevel(new, "Non"), family = binomial,
data = drinkdriving)
Deviance Residuals:
Min       1Q   Median       3Q      Max
-2.3076   0.3803   0.3803   0.3803   0.8657
Coefficients:
Estimate Std. Error z value Pr(>|z|)
(Intercept)               0.7885     0.5394   1.462   0.1438
relevel(new, "Non")DR50   1.8018     0.8058   2.236   0.0253 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
(Dispersion parameter for binomial family taken to be 1)
Null deviance: 46.832  on 58  degrees of freedom
Residual deviance: 41.636  on 57  degrees of freedom
(191 observations deleted due to missingness)
AIC: 45.636
Number of Fisher Scoring iterations: 5
anova(model_drink_offence, test = "Chisq")
[1] 84
Analysis of Deviance Table
Model: binomial, link: logit
Response: newoutcome
Terms added sequentially (first to last)
Df Deviance Resid. Df Resid. Dev Pr(>Chi)
NULL                                   58     46.832
relevel(new, "Non")  1   5.1962        57     41.636  0.02264 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
drinkdriving$noffence <- ifelse(drinkdriving$prior_offence ==
"N", 0, 1)
[1] 85
drinkdriving$noffence <- as.factor(drinkdriving$noffence)
[1] 86
model_no_ffence <- glm(newoutcome ~ noffence, data = drinkdriving,
family = binomial)
[1] 87
summary(model_no_ffence)
[1] 88
Call:
glm(formula = newoutcome ~ noffence, family = binomial, data = drinkdriving)
Deviance Residuals:
Min       1Q   Median       3Q      Max
-1.9990   0.5398   0.6681   0.6681   0.6681
Coefficients:
Estimate Std. Error z value Pr(>|z|)
(Intercept)   1.3863     0.1838   7.542 4.62e-14 ***
noffence1     0.4661     0.4224   1.104     0.27
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
(Dispersion parameter for binomial family taken to be 1)
Null deviance: 233.28  on 243  degrees of freedom
Residual deviance: 231.98  on 242  degrees of freedom
(6 observations deleted due to missingness)
AIC: 235.98
Number of Fisher Scoring iterations: 4
age <- sort(unique(drinkdriving$age))
[1] 89
df <- data.frame(age, nighttime = c("day"), prior_offence = c("N"),
speed = c(30), bac = c(0))
[1] 90
df$nighttime <- as.factor(df$nighttime)
[1] 91
df$model_prediction <- predict(model_5, newdata = df, type = "response")
[1] 92
summary(df$model_prediction)
[1] 93
Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
0.4204  0.8368  0.9731  0.8861  0.9961  0.9998
ggplot(df, aes(x = age, y = model_prediction)) + geom_line(position = "dodge",
stat = "identity", size = 1, colour = "#2471A3") + theme_minimal() +
theme(plot.title = element_text(face = "bold")) + scale_y_continuous(breaks = c(0.4,
1), labels = c("Fine", "Warning")) + labs(title = "Predicted Probabilities of Receiving Fine for Different Ages",
x = "Age", y = "Outcome", subtitle = "Drivers who were stopped during the daytime, 30 mph with 0 BAC and no prior offence")
ggplot(df, aes(x = age, y = model_prediction)) + geom_line(position = "dodge",
stat = "identity", size = 1, colour = "#2471A3")
df$model_prediction
df
ks.test(c(rep(0,9),1), c(rep(0,9),1))
ks.test(c(rep(0,9),1), c(rep(0,9),1)) %>% str
ks.test(c(rep(0,9),1), c(rep(0,9),1))$statistic
ks.test(c(rep(0,9),1), c(rep(0,8),1))$statistic
ks.test(c(rep(0,9),1), c(rep(0,9),2))$statistic
ks.test(c(rep(0,9),1), c(rep(0,8),1,1))$statistic
ks.test(c(rep(0,9),1), c(rep(0,8),1,0))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,0))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,1))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,10))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,1))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,1), exact = F)$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,1), exact = T)$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),1,1))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),10,1))$statistic
ks.test(c(rep(0,9),10), c(rep(0,8),10,10))$statistic
ks.test(c(rep(0,9),10), c(10,rep(0,8),0,10))$statistic
library(text2vec)
library(proxyC)
simil(c(rep(0,9),10), c(10,rep(0,8),0,10))$statistic
install.packages("proxy")
library(proxy)
simil(c(rep(0,9),10), c(10,rep(0,8),0,10))$statistic
simil(c(rep(0,9),10), c(10,rep(0,8),0,10))
simil( list(c(rep(0,9),10), c(10,rep(0,8),0,10)))
list(c(rep(0,9),10), c(10,rep(0,8),0,10)))
list(c(rep(0,9),10), c(10,rep(0,8),0,10))
list(c(rep(0,9),10), c(10,rep(0,8),10)))
list(c(rep(0,9),10), c(10,rep(0,8),10))
simil( list(c(rep(0,9),10), c(10,rep(0,8),10)))
ks.test( list(c(rep(0,9),10), c(10,rep(0,8),10)))
ks.test( c(rep(0,9),10), c(10,rep(0,8),10))
ks.test( c(rep(0,9),10), c(10,rep(0,8),1))
ks.test( c(rep(0,9),10), c(10,rep(0,8),0))
ks.test( c(rep(0,9),10), c(10,rep(0,8),1))
ks.test( c(rep(0,9),10), c(10,rep(0,8),10))
ks.test( c(rep(0,9),10), c(100,rep(0,8),10))
ks.test( c(rep(0,9),10), c(100,rep(0,8),100))
ks.test( c(rep(0,9),10), c(10,rep(0,8),100))
ks.test( c(rep(0,9),10), c(1,rep(0,8),100))
ks.test( c(rep(0,9),10), c(0,rep(0,8),100))
simil( list(c(rep(0,9),10), c(10,rep(0,8),10)))
simil( list(c(rep(0,9),10), c(100,rep(0,8),10)))
NROW(c(1))
NROW(c(1,2))
readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
b = readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
b
pairs = readRDS("C:/Users/s1364178/Dropbox/experimentdb/1b_2020-02-22_18-15-40--2020-02-22_18-17-59.RData.RDS")
pairs
readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping (2).RDS")
readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
readRDS("C:/Users/s1364178/Dropbox/experimentdb/3b_2020-02-22_18-41-19--2020-02-22_18-41-51.RData.RDS")
readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
x <- readRDS("C:/Users/s1364178/Dropbox/experimentdb/generated_stims.RDS")
head(x)
head(x[[1]]$pairs)
shiny::runApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp/app.R", launch.browser = TRUE)
shiny::runApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp/app.R", launch.browser = TRUE)
shiny::runApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp/app.R", launch.browser = TRUE)
shiny::runApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp/app.R", launch.browser = TRUE)
shiny::runApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp/app.R", launch.browser = TRUE)
format(x[[1]]$pairs$sendtime)
shiny::runApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp/app.R", launch.browser = TRUE)
rsconnect::deployApp("C:/Users/s1364178/Dropbox/phd/experiment/labapp",forceUpdate = T, launch.browser = F)
x <- readRDS("C:/Users/s1364178/Dropbox/experimentdb/1a_2020-02-25_20-21-43--2020-02-25_20-45-02.RData.RDS")
x
head(x)
class(x)
head(x)
y=x[!x$burnin,]
table(y$say, y$sent)
library(ggplot2)
table(y$say, y$sent) %>% reshape2::melt()
table(y$say, y$sent) %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,color=value))+geom_tile()
table(y$say, y$sent) %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()
table(y$say, y$sent) %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_brewer()
table(y$say, y$sent) %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c()
table(y$say, y$sent) %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d()
table(y$say, y$sent) %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c()
#### initial pilot testing ####
library(ggplot2);library(dplyr)
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d()+theme_bw()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d()+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(begin = 0.2)+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1)+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,begin=0.2)+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.2)+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.9)+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
table(x$say, x$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
ggplot(x, aes(y=cumsum(correct)))+geom_point()
ggplot(x, aes(y=cumsum(correct), x=1:nrow(x)))+geom_point()
ggplot(x, aes(y=cumsum(correct), x=1:nrow(x)))+geom_point()+ylim(c(0,135))
sum(x$correct)
77/135
sum(x$correct[!x$burnin])
sum(x$correct[!x$burnin])/length(x$correct[!x$burnin])
sum(x$correct[x$burnin])/length(x$correct[x$burnin])
sum(x$correct[x$burnin])
lang
setwd("C:/Users/s1364178/Dropbox/phd/experiment/labapp") # for local saving
load("C:/Users/s1364178/Dropbox/phd/experiment/app/appdata.RData")   # pre-saved data
source("C:/Users/s1364178/Dropbox/phd/experiment/expgen_scripts.R")  # required: scripts
library(dplyr)
# paths
simlexpath = "C:/Users/s1364178/korpused/SimLex-999/SimLex-999.txt"   # path to the Simlex999  dataset txt file
dictpath   = "C:/Users/s1364178/korpused/SimLex-999/en_GB-large.dic"  # path to some English wordlist
# we used https://sourceforge.net/projects/wordlist/files/speller/2019.10.06/hunspell-en_GB-large-2019.10.06.zip/download
vectorspath = "C:/Users/s1364178/korpused/fasttext_wikipedia2019.txt" # path to embeddings
# we used fastext trained on wikipedia dump 2019
# concmin = 2        # minimal word concreteness rating for words in [1,5] (most are >4.5, only few like "belief")
freeassocpath = "C:/Users/s1364178/korpused/freeassocnorms/norms.txt"
# path to a single file containing the The University of South Florida word association, rhyme, and word fragment norms
# Nelson, D. L., McEvoy, C. L., & Schreiber, T. A. (1998). The University of South Florida word association, rhyme, and word fragment norms. http://w3.usf.edu/FreeAssociation/
# experiment stims in English:
params = list(
# experiment stims in English:
wordlen_min       = 3     , # length of words from simlex to use
wordlen_max       = 7     ,
assocmax          = 1     , # filter out "free-associated" words ([0,10] but most are <1)
poslist           = "N"   , # which POS to use
nwords            = 10    , # size of natural language lexicon/meanings to use per stim set (see also nlang below!)
nstims            = 40    , # how many stim sets to create (i.e. how many dyads will be run)
nbaseline         = 20    , # how many stims sets (out of nstims) are in the baseline/control condition
nsimilar          = 3     , # how many pairs to have which are > simthreshold_high
allowduplicates   = 10     , # how many max duplicate target pairs across stims
# 3 for 40 stims if 1 pair, 5 if 2)
# making it equal to nstims will disable the check alltogether
simthreshold_high = 8     , # above this is a "similar" word [0,10] - this is for simlex
simthreshold_low  = 0.2   , # below this is a "not similar" word [0,1] - this is for the vector cosine
freeassoc_threshold=0.02  , # below this is "not freely associated" [0,1] - for the USF norms
# with nwords=20 and nsimilar=2 0.3 was minimum feasible, can do less if smaller lexicon
editmin          = 3     , # edit distance threshold for both natural and artificial words;
# uses Optimal String Alignment (Levenshtein + transposition)
allowsameinitial  = F     , # allow target pairs to have the same initial letter? (substrings are not allowed though, so hero-heroine won't be in there)
# artificial language and stims:
nlang     = 7             , # size of artificial language lexicon (see also nwords above!)
langlen   = 2             , # uniform length of artificial words, in number of CV syllables
vowels    = "aeoui"       , # string of allowed vovels
cons      = "qwtpsfhnmrl" , # string of allowed consonants
transl    = c("vdbz",
"wtps")       , # letters in the English wordlist to homogenize to catch stims that are
# similar-sounding o English words; must be 2 strings of equal(!) length,
# those in 1 transformed into those in 2
maxinitial = 2          , # times each consonant is allowed to start an artificial word per stim set (high=disables)
constraininitials = T     , # Constrain artificial words: initial letter cannot overlap with English stims
# experiment options
#nrounds   = 114           , # number of rounds for each dyad
pairmultiplier = c(targets=11,     # in each game in expm condition, how many pairs will be targets
distractors=5,  # ...distractor pairs (don't include target meanings)
halftargets=2,  # ...pairs of mixed target+distractor (also targets from different pairs)
baseline=3      # multiplier for all pairs/uniform distribution in the baseline
),
burnin    = 3   # first (1/burnin)*(n rounds) will be training period; will attempt to balance pairs
)
# params$targetprob = seq(0,0.9, length.out = params$nstims) # percentage of target pair shown
# LOAD DATA
# simlex = read.csv(simlexpath, sep="\t", header=T, stringsAsFactors = F); w=unique(unlist(simlex[simlex$POS %in% params$poslist,1:2]))
# engdict = readLines(dictpath) %>% gsub("/.*", "", .) %>% tolower()
# 80604
# freenorms = read.csv(freeassocpath, sep=",", header=T, stringsAsFactors = F, strip.white = T) %>% filter(QPS=="N" ) %>% .[,c(1:2,6:7)] %>% mutate(CUE=tolower(CUE), TARGET=tolower(TARGET), BSG=as.numeric(BSG), FSG=as.numeric(FSG)) %>% filter(CUE %in% w | TARGET %in% w) %>% mutate(score=pmax(FSG, BSG,na.rm = T)) %>% .[c(1:2,5)]
# freenorms = rbind(freenorms, setnames(freenorms[, c(2,1,3)], c("CUE", "TARGET", "score"))  )
## Import and subset vectors; data.table speeds the import up
# library(data.table)
# simmat = fread(vectorspath, sep=" ", header=F, skip = 1, quote="")
# simmat[which(is.na(simmat[,1])),1] = as.character(runif(1)) # one missing rowname for some reason
# simmat = data.frame(simmat, row.names = 1)
# simmat = simmat[unique(unlist(simlex[,1:2])), ]
# simmat = data.matrix(simmat)
# simmat = sim2(simmat)   # symmetric similarity matrix the size of the simlex lexicon
# save(simmat, simlex, engdict, freenorms, file="C:/Users/s1364178/Dropbox/phd/experiment/app/appdata.RData")
#
stims = list()
stims$words = wordsampler(
params$nwords
, params$nstims
, params$nsimilar
, params$simthreshold_high
, params$simthreshold_low
, params$assocmax
, params$editmin
, simlex
, simmat
, params$allowduplicates
, params$allowsameinitial
, params$poslist
, params$wordlen_min
, params$wordlen_max
, freenorms
, params$freeassoc_threshold
)
sort(table( attr( stims$words, "globalx" ))) # how many pairs repeated in set
stims$lang = langgen(
params$langlen
, engdict
, params$maxinitial
, params$vowels
, params$cons
, params$transl)
stims$lang
stims$lang[sample(1:2000, 20)]
x[c(1,135),]
44-23
x <- readRDS("C:/Users/s1364178/Dropbox/experimentdb/bookkeeping.RDS")
head(x)
x[1,]
x[2,]
x <- readRDS("C:/Users/s1364178/Dropbox/experimentdb/1a_2020-02-25_20-21-43--2020-02-25_20-45-02.RData.RDS")
library(text2vec)
table(y$say, y$sent) %>% sim2()
table(y$say, y$sent) %>% as.matrix() %>% sim2()
table(y$say, y$sent) %>% as.matrix()
class(table(y$say, y$sent) %>% as.matrix() )
table(y$say, y$sent) %>% matrix() %>% sim2()
table(y$say, y$sent) %>% matrix()
table(y$say, y$sent) %>% as.matrix()
as.matrix(table(y$say, y$sent))
as.matrix(table(y$say, y$sent)) %>% as.matrix() %>% as.matrix() %>% sim2()
as.matrix(table(y$say, y$sent)) %>% as.matrix() %>% as.matrix()
(table(y$say, y$sent)) %>% matrix(ncol=7)
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2()
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8)+theme_classic()
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1)+theme_classic()
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = 1)+theme_classic()
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = 1,values = c(0,1))+theme_classic()
(table(y$say, y$sent)) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1)+theme_classic()
install.packages("scs")
install.packages("svs")
library(svs)
table(y$say, y$sent) %>% pmi
table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8)+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8)+theme_classic()
table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8, na.value = "white")+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
table(y$say, y$sent) %>% matrix(ncol=7, dimnames = list(rownames(.), colnames(.))) %>% sim2() %>% reshape2::melt() %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1)+theme_classic()
table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8, na.value = "white")+theme_classic()
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()
library(patchwork)
+
#ppmi
{table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8, na.value = "white")+theme_classic()}
{
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()}
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()} +
#ppmi
{table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8, na.value = "white")+theme_classic()}
{
table(y$say, y$sent) %>% reshape2::melt() %>% mutate(value=ifelse(value==0,NA,value)) %>% mutate(value=as.factor(value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_d(direction = -1,end =0.8)+theme_classic()} +
#ppmi
{table(y$say, y$sent) %>% pmi %>% reshape2::melt() %>% mutate(value=ifelse(value<=0,NA,value)) %>% ggplot(aes(x=Var1,y=Var2,fill=value))+geom_tile()+scale_fill_viridis_c(direction = -1,end =0.8, na.value = "white")+theme_classic()}
table(y$say, y$sent) %>% table()
table(y$say, y$sent)
